# file header
snippet hdr
	/*
	 * ${1:`expand('%:t')`} - ${2}
	 *
	 * (c) Copyright `strftime("%Y")` ${3:`g:snips_copyright`}. All Rights Reserved.
	 *
	 * Maintainer: ${4:`g:snips_author`} <${5:`g:snips_email`}>
	 *    Created: `strftime("%Y-%m-%d")`
	 * LastChange: `strftime("%Y-%m-%d")`
	 */
	${6}
endsnippet 	
snippet zj
/**
 * ${1}
 **/
endsnippet 
# include file
snippet Inc
#include <${1:stdio}.h>${2}
endsnippet 
snippet inc
#include "${1:`Filename("$1")`}.h"${2}
endsnippet 
# macro defines
# #defile <...> 
snippet def
#define ${1} 
endsnippet 
snippet ifd
#ifdef ${1}
#endif
endsnippet 
snippet ifn
#ifndef ${1}
#endif
endsnippet 
snippet once
#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_H')`}
#define $1
${2}
#endif /* $1 */
endsnippet 
# condition
snippet if
if (${1:/* condition */})
{
	${2:/* code */}
}
endsnippet 
# else if 
snippet ei 
else if (${1:/* condition */}) { 
	${2:TODO} 
}
endsnippet 
snippet else
else
{
	${1:/* code */}
}
endsnippet 
# return 
snippet re 
return(${1:/* condition */}); 
endsnippet 
# loop
snippet do
do
{
	${2:/* code */}
} while (${1:/* condition */});
endsnippet 
snippet while
while (${1:/* condition */})
{
	${2:/* code */}
}
endsnippet 
# While Loop 
snippet wh 
while (${1:/* condition */}) { 
	${2:TODO} 
} 
endsnippet 
# switch 
snippet sw 
switch (${1:/* condition */}) { 
	case ${2:c}: { 
	} 
	break; 

	default: { 
	} 
	break; 
} 
endsnippet 
snippet for
for (${1:/* initialize */}; ${2:/* condition */}; ${3:/* loop */})
{
	${4:/* code */}
}
endsnippet 
# structure
snippet struct
typedef struct ${1:mystruct}
{
	${3:/* member */}
} ${2:$1_s};
endsnippet 	

snippet union
typedef union ${1:myunion}
{
	${3:/* member */}
} ${2:$1_u};
endsnippet 
snippet enum
typedef enum ${1:myenum}
{
	${3:/* member */}
} ${2:$1_e};
endsnippet 
# main()
snippet main
int main(int argc, const char *argv[])
{
	${1}
	return 0;
}
endsnippet 
#================================= 
#结对符 
#================================= 
 # 括号 bracket 
snippet b "bracket" i 
(${1})
endsnippet 
# 方括号 square bracket，设定为 st 而非 sb，避免与 b 冲突
snippet st "square bracket" i 
[${1}]
endsnippet 
# 大括号 brace 
snippet br "brace" i 
{ 
	${1}
} 
endsnippet 
# 单引号 single quote，设定为 se 而非 sq，避免与 q 冲突
snippet se "single quote" I
'${1}'
endsnippet
# 双引号 quote
snippet q "quote" I
"${1}"
endsnippet
# 指针符号 arrow 
snippet ar "arrow" i 
->${1}
endsnippet 
# dot 
snippet d "dot" i 
.${1}
endsnippet 
# 作用域 scope 
snippet s "scope" i 
::${1}
endsnippet
